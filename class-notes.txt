Nextjs session 13th-Jan-2025

Git Url: https://github.com/aniljos/Next-Jan-13-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock

Quiz Day 1: https://forms.gle/zqMmVxNTukXtscMz9
Quiz Day 2: https://forms.gle/76hXXRXiV17UBAnG9
Quiz Day 3: https://forms.gle/fcq16jB5WvYM9RRg8

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3


JSX

1. Another way of writing Javascript
2. JSX will have to be compiled(converter) to Javascript
3. Compiler: babel compiler
4. Simplifies the way to write the presentation logic

Toolchain

1. Single Page Application(SPA) or MPA
2. Client-side rendering & Server-side rendering
3. SEO support
4. Latest React features(React 18/19)
5. Full stack

Nextjs project files

1. package.json: npm configuration files	
		dependencies, scripts
2. node_modules folder
	all dependencies are installed here
3. tsconfig.json	
		ts compiler configuration
4. eslint.config.mjs
		eslint
5. next.config.ts
		Nextjs configuration
6.public folder
	Any files directly accessable for the browser
	images, icons, css
7. src folder	
	source code
	optional folder
8. app folder
	Folder for the App Router
		layout.tsx: Application layout
			html, body, header
		page.tsx
			page/view displayed on the default route(http://localhost:3001/)
		about/page.tsx
			page/view displayed on the about route(http://localhost:3001/about)
			
props
	- They are always read-only(immutable) in the child component
	
	<Counter initialValue={3}/>  initialValue => props.initialValue
	
	<ReduxProvider>
		<div>....</div>   <div>....</div> => props.children
	</ReduxProvider>
	
state
    - state changes trigger a re-render
	- state changes are async 
	- state changes are batched(React 18)
		counter = 5
		setCounter(counter + 1);  ==> setCounter(6);
        setCounter(counter + 1);  ==> setCounter(6);
		
		setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback) => 5
        setCounter(prevCounter => prevCounter + 1); ==> setCounter(invoke the callback) => 6 
		
	- signature setXXX
			-setXXX(updated value)
			-setXXX(callback the return the new/updated value)
	- state should be treated as immutable(read-only)
		-create a copy, change the copy, update the state
		
Components in react
	- functional components(prefferend)
	- class components (prefferend before react 16.8)
	
	
	- client-side rendering(csr) 
		- Initial version of react
		- component function is invoked on the browser
		- client intercations(handling events) on in client component
	- server side rendering (ssr)- Server Components
		- Introduced from React 18 & Next 13(App Router)
		- component function is invoked on the server
		
useEffect
	mount-  useEffect(() => {}, [])
		1. Initializaton after the component is rendered.
		2. API calls
		3. DOM Initializations
		4. Event handlers(window/document) register
	unmount:
		1. Clean-up
		2. Unregister the event handlers
		3. Cancel API calls
	update
		1. API calls or any other logic
		
Forms
	1. Controlled input(Recommended)
			Reactive
			component state (read/set)(useState/useReducer)
			
	2. Uncontrolled input
			Get a reference to the from element(useRef)
				similar to document.getElementById()
	
	
async/await
  1. Works with promise
  2. Write async code that looks/behaves like sync code.
  3. Avoid callback hell/chain
  
CSS
	- class(preferred)
	- style(inline)
	
Excercise: Complete the edit component page
	1. Implement the onchange event for all input fields
	2. Implement the save handler: 
				save the data to the backend 
					PUT http://localhost:9000/products/4
				navigate back to products
	3. Implement the cancel handler
				navigate back to products
				
Session state
	Browser: localStorage & sessionStorage
    Memory of the application
		React Context, Redux
		
Redux

	- redux
	- react-redux
	- @reduxjs/toolkit
	
	-npm install @reduxjs/toolkit react-redux

1. Action is an object: 
		property called "type" => type of operation to be executed
		other properties(if required)
		
		{type: "update_token", token: "1234"}
		{type: "clear_token"}
2. Reducer is a function:
		Receive the action
		Based on the type of actions => updates the store
		Every store will have only one reducers
			-use a pattern to write mutiple reducers and combine to a single reducer
			
3. Middleware(s)
		Intercepts the action before its handled by the reducer	
			--logging, validations,
			-- async operation(API call)
			
			-- Middleware Library for async operation
					-Redux thunk, Redux saga
4. Redux ToolKit
		- Action creators: helper functions that creates actions
		- Slices: simplifies the reducer logic
					(work with state in as mutable)
		
		

			

			
react-redux: library for integration
	-Provider component: integrates the store to the application	
	- useDispatch hook: return the dispatch method
	- useSelector hook: return the state(select)
	- useStore hook: return the store
	
React context:
	This is a low level api.
	Multiple contexts in an application
	useContext hook: read form the context

Excercise
	1. Replicate the gadget-store and view-cart using react context
	2. Either use the useState hook or useReducer hook
	

	
App Design and Performance

1. Smaller components: easy maintain/modularity
2. Reuseablity: 
		Custom Hooks - functional components
		Higher order components(HOC) - class or functional components
3.Optimization
	React.memo: 
		HOC
		creates a memoized copy(cached) of the component. 
		The memoized copy get invalidated if the state/props of the component changes(component is rerendered)
	useCallback
	useMemo
	Virtual DOM
	
Tutorials: https://www.youtube.com/@DaveGrayTeachesCode
	

	

	



